import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
  public void report_error(String message, Object info) {
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol sym = (java_cup.runtime.Symbol) info;
      int line = sym.left;   // aqui pega o valor left que foi passado no Symbol
      int col = sym.right;   // aqui pega o right (ou use outra estratégia)
      System.err.printf("Erro sintático na linha %d, coluna %d: %s\n", line, col, message);
    } else {
      System.err.println("Erro sintático: " + message);
    }
  }
:};

// Tokens terminais
terminal IDENT, NUM, FUNC, PT, RECEBE;
terminal ELGIO, INTEIRO, ZERO;
terminal ENQUANTO, SE, ENTAO, SENAO;
terminal INICIO, FIM;
terminal MAIOR, MENOR, IGUAL, DIFERENTE;
terminal SEPARADOR; 
terminal MAIS, MENOS, MULT, DIV;
terminal PARENTESE1, PARENTESE2;



// Não-terminais
non terminal programa, bloco_principal, declaracoes_funcoes;
non terminal comandos, comando, comando_ou_vazio;
non terminal declaracao_variavel, atribuicao, comando_se, comando_enquanto, condicao;
non terminal expressao, termo, fator;
non terminal chamada_funcao, uso_param, declara_funcao, parametros, construcao_funcao;
non terminal regras_funcao, expressao_retorno, termo_retorno, fator_retorno;
non terminal retorno_funcao, corpo_funcao, add_ident;

// Início da gramática
start with programa;

// Regras principais

programa ::= declaracoes_funcoes bloco_principal {: System.out.println("Expressão válida!"); :};

declaracoes_funcoes ::= construcao_funcao declaracoes_funcoes
                      | /* vazio */;

bloco_principal ::= INICIO PT comandos FIM PT;

comandos ::= comando comandos
           | comando;

comando ::= declaracao_variavel PT
          | atribuicao PT
          | comando_se
          | comando_enquanto;

// Declarar variável com tipo 'inteiro'
declaracao_variavel ::= INTEIRO add_ident ;

add_ident ::= IDENT add_ident | /* vazio */;

// Atribuição sem tipo
atribuicao ::= INTEIRO IDENT RECEBE expressao | IDENT RECEBE expressao;

// Comando SE
comando_se ::= SE condicao PT ENTAO PT INICIO PT comandos FIM PT SENAO PT INICIO PT comando_ou_vazio FIM PT;

comando_ou_vazio ::= comandos | /* vazio */;

// Comando ENQUANTO
comando_enquanto ::= ENQUANTO condicao PT INICIO PT comandos FIM PT;

condicao ::= expressao MAIOR expressao
           | expressao MENOR expressao
           | expressao IGUAL expressao
           | expressao DIFERENTE expressao;

expressao ::= expressao MAIS termo
            | expressao MENOS termo
            | termo;

termo ::= termo MULT fator
        | termo DIV fator
        | fator;

fator ::= NUM
        | chamada_funcao
        | ZERO
        | IDENT;

// Funções

construcao_funcao ::= declara_funcao INICIO PT corpo_funcao FIM PT;

declara_funcao ::= INTEIRO FUNC PARENTESE1 parametros PARENTESE2 PT;



parametros ::= INTEIRO IDENT
             | INTEIRO IDENT SEPARADOR parametros
             | /* vazio */;

corpo_funcao ::= regras_funcao retorno_funcao;

regras_funcao ::= comando regras_funcao
                | comando;

expressao_retorno ::= expressao_retorno MAIS termo_retorno
                    | expressao_retorno MENOS termo_retorno
                    | termo_retorno;

termo_retorno ::= termo_retorno MULT fator_retorno
                | termo_retorno DIV fator_retorno
                | fator_retorno;

fator_retorno ::= NUM
                | ZERO
                | IDENT;

uso_param ::= fator_retorno SEPARADOR uso_param
            | fator_retorno;

retorno_funcao ::= ELGIO RECEBE expressao_retorno PT
                 | /* vazio */;

chamada_funcao ::= FUNC PARENTESE1 uso_param PARENTESE2;