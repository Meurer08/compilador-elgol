
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\003\007\000\002\005\004" +
    "\000\002\005\003\000\002\006\004\000\002\006\004\000" +
    "\002\006\003\000\002\006\003\000\002\010\004\000\002" +
    "\011\006\000\002\011\005\000\002\012\023\000\002\013" +
    "\012\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\016\005\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\024\010\000\002\022\010" +
    "\000\002\023\004\000\002\023\006\000\002\023\002\000" +
    "\002\032\004\000\002\025\004\000\002\025\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\003\000\002\027" +
    "\005\000\002\027\005\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\021\005\000" +
    "\002\021\003\000\002\031\006\000\002\031\002\000\002" +
    "\020\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\006\012\010\020\ufffe\001\002\000\004\002" +
    "\171\001\002\000\004\020\164\001\002\000\004\020\023" +
    "\001\002\000\006\012\010\020\ufffe\001\002\000\004\006" +
    "\011\001\002\000\004\033\012\001\002\000\006\012\014" +
    "\034\uffdf\001\002\000\004\034\020\001\002\000\004\004" +
    "\015\001\002\000\006\026\016\034\uffe1\001\002\000\006" +
    "\012\014\034\uffdf\001\002\000\004\034\uffe0\001\002\000" +
    "\004\007\021\001\002\000\004\020\uffe2\001\002\000\004" +
    "\020\uffff\001\002\000\004\007\024\001\002\000\012\004" +
    "\030\012\031\014\035\015\027\001\002\000\006\011\144" +
    "\021\uffcf\001\002\000\016\004\ufff8\011\ufff8\012\ufff8\014" +
    "\ufff8\015\ufff8\021\ufff8\001\002\000\012\004\044\005\043" +
    "\006\045\013\050\001\002\000\004\010\122\001\002\000" +
    "\004\004\117\001\002\000\016\004\030\011\uffdc\012\031" +
    "\014\035\015\027\021\uffdc\001\002\000\016\004\ufff7\011" +
    "\ufff7\012\ufff7\014\ufff7\015\ufff7\021\ufff7\001\002\000\004" +
    "\007\115\001\002\000\012\004\044\005\043\006\045\013" +
    "\050\001\002\000\004\007\042\001\002\000\004\021\040" +
    "\001\002\000\004\007\041\001\002\000\006\012\uffe3\020" +
    "\uffe3\001\002\000\016\004\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\015\ufff9\021\ufff9\001\002\000\024\007\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\001\002\000\024\007\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\001\002\000\004" +
    "\033\104\001\002\000\024\007\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\001\002" +
    "\000\024\007\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\001\002\000\024\007\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\001\002\000\024\007\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\027\uffeb\030\uffeb\031\075\032\076\001" +
    "\002\000\016\022\070\023\071\024\065\025\066\027\064" +
    "\030\067\001\002\000\004\007\054\001\002\000\004\020" +
    "\055\001\002\000\004\007\056\001\002\000\012\004\030" +
    "\012\031\014\035\015\027\001\002\000\014\004\030\012" +
    "\031\014\035\015\027\021\ufffb\001\002\000\004\021\061" +
    "\001\002\000\004\007\062\001\002\000\016\004\ufff2\011" +
    "\ufff2\012\ufff2\014\ufff2\015\ufff2\021\ufff2\001\002\000\004" +
    "\021\ufffc\001\002\000\012\004\044\005\043\006\045\013" +
    "\050\001\002\000\012\004\044\005\043\006\045\013\050" +
    "\001\002\000\012\004\044\005\043\006\045\013\050\001" +
    "\002\000\012\004\044\005\043\006\045\013\050\001\002" +
    "\000\012\004\044\005\043\006\045\013\050\001\002\000" +
    "\012\004\044\005\043\006\045\013\050\001\002\000\010" +
    "\007\ufff0\027\064\030\067\001\002\000\010\007\ufff1\027" +
    "\064\030\067\001\002\000\024\007\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\027\uffec\030\uffec\031\075\032\076\001" +
    "\002\000\012\004\044\005\043\006\045\013\050\001\002" +
    "\000\012\004\044\005\043\006\045\013\050\001\002\000" +
    "\024\007\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\001\002\000\024\007\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\001\002\000\010\007\uffee\027\064\030\067\001" +
    "\002\000\010\007\uffef\027\064\030\067\001\002\000\024" +
    "\007\uffed\022\uffed\023\uffed\024\uffed\025\uffed\027\uffed\030" +
    "\uffed\031\075\032\076\001\002\000\010\004\110\005\105" +
    "\013\106\001\002\000\020\007\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\034\uffd5\001\002\000\020\007\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\001" +
    "\002\000\006\026\113\034\uffd1\001\002\000\020\007\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\034\uffd3\001" +
    "\002\000\004\034\112\001\002\000\024\007\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\001\002\000\010\004\110\005\105\013\106\001\002" +
    "\000\004\034\uffd2\001\002\000\016\004\ufffa\011\ufffa\012" +
    "\ufffa\014\ufffa\015\ufffa\021\ufffa\001\002\000\006\011\uffdd" +
    "\021\uffdd\001\002\000\006\007\ufff6\010\120\001\002\000" +
    "\012\004\044\005\043\006\045\013\050\001\002\000\010" +
    "\007\ufff5\027\064\030\067\001\002\000\012\004\044\005" +
    "\043\006\045\013\050\001\002\000\010\007\ufff4\027\064" +
    "\030\067\001\002\000\004\007\125\001\002\000\004\016" +
    "\126\001\002\000\004\007\127\001\002\000\004\020\130" +
    "\001\002\000\004\007\131\001\002\000\012\004\030\012" +
    "\031\014\035\015\027\001\002\000\004\021\133\001\002" +
    "\000\004\007\134\001\002\000\004\017\135\001\002\000" +
    "\004\007\136\001\002\000\004\020\137\001\002\000\004" +
    "\007\140\001\002\000\002\001\002\000\004\021\142\001" +
    "\002\000\004\007\143\001\002\000\016\004\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\015\ufff3\021\ufff3\001\002\000\004\010" +
    "\146\001\002\000\004\021\uffde\001\002\000\010\004\110" +
    "\005\105\013\106\001\002\000\014\007\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\001\002\000\010\007\160\027\156" +
    "\030\157\001\002\000\014\007\uffd9\027\uffd9\030\uffd9\031" +
    "\152\032\153\001\002\000\010\004\110\005\105\013\106" +
    "\001\002\000\010\004\110\005\105\013\106\001\002\000" +
    "\014\007\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\001\002" +
    "\000\014\007\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\001" +
    "\002\000\010\004\110\005\105\013\106\001\002\000\010" +
    "\004\110\005\105\013\106\001\002\000\004\021\uffd0\001" +
    "\002\000\014\007\uffda\027\uffda\030\uffda\031\152\032\153" +
    "\001\002\000\014\007\uffdb\027\uffdb\030\uffdb\031\152\032" +
    "\153\001\002\000\004\002\000\001\002\000\004\007\165" +
    "\001\002\000\012\004\030\012\031\014\035\015\027\001" +
    "\002\000\004\021\167\001\002\000\004\007\170\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\012\002\003\004\004\022\005\024\006\001" +
    "\001\000\002\001\001\000\004\003\162\001\001\000\002" +
    "\001\001\000\010\004\021\022\005\024\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\031\010\033\011\035\012\025\013\032\025\024" +
    "\032\036\001\001\000\004\031\144\001\001\000\002\001" +
    "\001\000\014\014\123\015\051\016\050\017\046\020\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\031\010\033\011\035\012\025\013\032\025\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\052\015" +
    "\051\016\050\017\046\020\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\057\006" +
    "\056\010\033\011\035\012\025\013\032\001\001\000\016" +
    "\005\062\006\056\010\033\011\035\012\025\013\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\102\017\046\020\045\001" +
    "\001\000\012\015\101\016\050\017\046\020\045\001\001" +
    "\000\012\015\100\016\050\017\046\020\045\001\001\000" +
    "\010\016\073\017\046\020\045\001\001\000\012\015\072" +
    "\016\050\017\046\020\045\001\001\000\012\015\071\016" +
    "\050\017\046\020\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\077\020\045\001" +
    "\001\000\006\017\076\020\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\110\030\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\113" +
    "\030\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\120\016\050" +
    "\017\046\020\045\001\001\000\002\001\001\000\012\015" +
    "\122\016\050\017\046\020\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\131\006\056" +
    "\010\033\011\035\012\025\013\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\147\027" +
    "\150\030\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\154\001\001\000\004\030" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\161\030\146\001\001\000\006\027\160\030\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\165\006" +
    "\056\010\033\011\035\012\025\013\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info)  {
        Symbol sym = (Symbol) info;
        System.out.println("Warning - " + message);
        System.out.println("Info - " + info);
        System.err.println("Token: " + sym.value);
        System.err.println("Linha: " + sym.left + ", Coluna: " + sym.right);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.out.println("Info - " + info);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaracoes_funcoes bloco_principal 
            {
              Object RESULT =null;
		 System.out.println("Expressão válida!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracoes_funcoes ::= construcao_funcao declaracoes_funcoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracoes_funcoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracoes_funcoes ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracoes_funcoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloco_principal ::= INICIO PT comandos FIM PT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_principal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comandos ::= comando comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comandos ::= comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comando ::= declaracao_variavel PT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comando ::= atribuicao PT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comando ::= comando_se 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comando ::= comando_enquanto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracao_variavel ::= INTEIRO IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_variavel",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atribuicao ::= INTEIRO IDENT RECEBE expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atribuicao ::= IDENT RECEBE expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comando_se ::= SE condicao PT ENTAO PT INICIO PT comandos FIM PT SENAO PT INICIO PT comando_ou_vazio FIM PT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_se",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comando_enquanto ::= ENQUANTO condicao PT INICIO PT comandos FIM PT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_enquanto",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condicao ::= expressao MAIOR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condicao ::= expressao MENOR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condicao ::= expressao IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicao ::= expressao DIFERENTE expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressao ::= expressao MAIS termo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressao ::= expressao MENOS termo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressao ::= termo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // termo ::= termo MULT fator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // termo ::= termo DIV fator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // termo ::= fator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fator ::= NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fator ::= chamada_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fator ::= ZERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fator ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // construcao_funcao ::= declara_funcao INICIO PT corpo_funcao FIM PT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("construcao_funcao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declara_funcao ::= INTEIRO FUNC PARENTESE1 parametros PARENTESE2 PT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_funcao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros ::= INTEIRO IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros ::= INTEIRO IDENT SEPARADOR parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // corpo_funcao ::= regras_funcao retorno_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("corpo_funcao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // regras_funcao ::= comando regras_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("regras_funcao",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // regras_funcao ::= comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("regras_funcao",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expressao_retorno ::= expressao_retorno MAIS termo_retorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_retorno",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expressao_retorno ::= expressao_retorno MENOS termo_retorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_retorno",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expressao_retorno ::= termo_retorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_retorno",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termo_retorno ::= termo_retorno MULT fator_retorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo_retorno",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // termo_retorno ::= termo_retorno DIV fator_retorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo_retorno",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termo_retorno ::= fator_retorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo_retorno",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fator_retorno ::= NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator_retorno",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fator_retorno ::= ZERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator_retorno",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fator_retorno ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator_retorno",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // uso_param ::= fator_retorno SEPARADOR uso_param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("uso_param",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // uso_param ::= fator_retorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("uso_param",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // retorno_funcao ::= ELGIO RECEBE expressao_retorno PT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_funcao",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // retorno_funcao ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_funcao",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // chamada_funcao ::= FUNC PARENTESE1 uso_param PARENTESE2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_funcao",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
